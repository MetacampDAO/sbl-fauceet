import type { NextPage } from 'next';
import dynamic from 'next/dynamic';
import Head from 'next/head';
import Image from 'next/image';
import React from 'react';
import styles from '../styles/Home.module.css';
import { useAnchorWallet } from '@solana/wallet-adapter-react';
import { Transaction, Connection } from '@solana/web3.js';

const WalletDisconnectButtonDynamic = dynamic(
    async () => (await import('@solana/wallet-adapter-react-ui')).WalletDisconnectButton,
    { ssr: false }
);
const WalletMultiButtonDynamic = dynamic(
    async () => (await import('@solana/wallet-adapter-react-ui')).WalletMultiButton,
    { ssr: false }
);

const connectionUrl = process.env.CLUSTER_ENDPOINT || 'https://api.devnet.solana.com';
const connection = new Connection(connectionUrl, 'confirmed');

const Home: NextPage = () => {
    const wallet = useAnchorWallet();

    const onButtonClick = async () => {
        if (wallet) {
            const res = await fetch(`${window.location.origin}/api/faucet`, {
                method: 'POST', // *GET, POST, PUT, DELETE, etc.
                mode: 'cors', // no-cors, *cors, same-origin
                cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached
                credentials: 'same-origin', // include, *same-origin, omit
                headers: {
                    'Content-Type': 'application/json',
                    // 'Content-Type': 'application/x-www-form-urlencoded',
                },
                redirect: 'follow', // manual, *follow, error
                referrerPolicy: 'no-referrer', // no-referrer, *client
                body: JSON.stringify({ destPubKey: wallet?.publicKey.toBase58() }), // body data type must match "Content-Type" header
            });
            const { transaction } = await res.json();
            const tx = Transaction.from(Buffer.from(transaction, 'base64'));

            const signedTx = await wallet.signTransaction(tx);
            const rawTx = signedTx.serialize();
            const signature = await connection.sendRawTransaction(rawTx);
            console.log(signature);
        }
    };
    return (
        <div className={styles.container}>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>

            <main className={styles.main}>
                <h1 className={styles.title}>
                    Welcome to <a href="https://metacamp.so">SBL 2023 ðŸŽ‰</a>
                </h1>

                <div className={styles.walletButtons}>
                    {!wallet ? (
                        <WalletMultiButtonDynamic />
                    ) : (
                        <>
                            <WalletDisconnectButtonDynamic />{' '}
                            <button onClick={onButtonClick} className={styles.faucetButton}>
                                Obtain SOL
                            </button>
                        </>
                    )}
                </div>

                <p className={styles.description}>start getting some devnet SOL by connecting your wallet</p>
            </main>

            <footer className={styles.footer}>
                <a
                    href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
                    target="_blank"
                    rel="noopener noreferrer"
                >
                    Powered by{' '}
                    <span className={styles.logo}>
                        <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
                    </span>
                </a>
            </footer>
        </div>
    );
};

export default Home;
